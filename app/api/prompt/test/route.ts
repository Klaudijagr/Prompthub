import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { promptId, inputText } = await request.json()

    // Mock prompt content - in production, fetch from database
    const promptContent =
      "You are an expert content marketing assistant. Create compelling {content_type} about {topic} for {target_audience}. Focus on {key_objectives} and maintain a {tone} tone."

    // Simulate processing delay for progress demonstration
    await new Promise((resolve) => setTimeout(resolve, 1000))

    // Try OpenAI first
    try {
      const openaiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [
            {
              role: "user",
              content: promptContent.replace("{input}", inputText),
            },
          ],
          max_tokens: 500,
        }),
      })

      if (openaiResponse.ok) {
        const data = await openaiResponse.json()
        return NextResponse.json({
          result: data.choices[0].message.content,
          provider: "openai",
        })
      }
    } catch (openaiError) {
      console.log("OpenAI failed, trying Cohere...", openaiError)
    }

    // Fallback to Cohere
    try {
      const cohereResponse = await fetch("https://api.cohere.ai/v1/generate", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${process.env.COHERE_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "command-xlarge",
          prompt: promptContent.replace("{input}", inputText),
          max_tokens: 500,
        }),
      })

      if (cohereResponse.ok) {
        const data = await cohereResponse.json()
        return NextResponse.json({
          result: data.generations[0].text,
          provider: "cohere",
        })
      }
    } catch (cohereError) {
      console.log("Cohere also failed:", cohereError)
    }

    // If both fail, return mock response with more realistic content
    const mockResponses = {
      "blog post": `# ${inputText.charAt(0).toUpperCase() + inputText.slice(1)}

This is a comprehensive blog post about ${inputText}. Here's what you need to know:

## Key Points
- Important insight about the topic
- Actionable advice for readers  
- Data-driven recommendations
- Future trends and predictions

## Conclusion
This mock response demonstrates how the AI would generate content based on your prompt. In production, this would be actual AI-generated content tailored to your specific requirements.

*Call to Action: Ready to learn more? Subscribe to our newsletter for weekly insights!*`,

      "social media": `ðŸš€ ${inputText.charAt(0).toUpperCase() + inputText.slice(1)}

âœ¨ Key highlights:
â€¢ Engaging point #1
â€¢ Compelling insight #2  
â€¢ Actionable tip #3

ðŸ’¡ Pro tip: This is how you can apply this knowledge today!

#Marketing #Content #SocialMedia #Growth

ðŸ‘‰ What's your experience with this? Share in the comments!`,

      default: `Mock AI Response for: "${inputText}"

This is a sample response that demonstrates how the AI would process your input using the selected prompt template. 

Key features of this response:
- Contextually relevant to your input
- Follows the prompt structure
- Includes actionable insights
- Maintains the requested tone

In production, this would be generated by OpenAI or Cohere based on the actual prompt template and your specific input.`,
    }

    const responseType = inputText.toLowerCase().includes("blog")
      ? "blog post"
      : inputText.toLowerCase().includes("social")
        ? "social media"
        : "default"

    return NextResponse.json({
      result: mockResponses[responseType],
      provider: "mock",
    })
  } catch (error) {
    console.error("Test prompt error:", error)
    return NextResponse.json({ error: "Failed to test prompt" }, { status: 500 })
  }
}
